in progress

done

## These plugins can be modified
gitsigns - Turned on git blame for lines
autopairs - Add pairing rules
galaxyline - Remove elements from galaxyline
comment - Remove the default mappings and add our own
dap - Configure debugger for cpp
telescope - add fzy to telescope

## These plugins don't need callbacks becase all options with exposed with vim.g
rooter 
nvimtree
dashboard

## Settings for these plugins can be changed with a table. But if new options become available you'll probably need the callbacks to use them
which_key  
terminal 
compe  
lspinstall
treesitter

## Looks like you can configure everything with vimscript
bufferline

lvim.builtin.gitsigns.on_config_done = function(module)
	print("gitsigns: " .. vim.inspect(module ~= nil))
	print("inside gitsigns")
	require("gitsigns").setup({
		current_line_blame = true,
		current_line_blame_delay = 1000,
		current_line_blame_position = "eol",
	})
end

lvim.builtin.dap.on_config_done = function(dap)
	--print("bufferline: " .. vim.inspect(dap ~= nil))
	dap.adapters.lldb = {
		type = "executable",
		command = "/usr/bin/lldb-vscode",
		name = "lldb",
	}

	dap.configurations.cpp = {
		{
			name = "Launch",
			type = "lldb",
			request = "launch",
			program = "${workspaceFolder}/build/binary_name",
			cwd = "${workspaceFolder}/build",
			stopOnEntry = false,
			args = {},
			runInTerminal = false,
		},
	}
	dap.configurations.c = dap.configurations.cpp
end

lvim.builtin.autopairs.on_config_done = function(module)
	print(vim.inspect(module))
	local endwise = require("nvim-autopairs.ts-rule").endwise
	-- local npairs = require("nvim-autopairs")
	module.add_rules({
		endwise("def", "end", nil, nil),
	})
	-- Rule('def%s.+$', 'end', 'ruby')
	--        :use_regex(true)
	--        :end_wise(cond.not_after_regex_check('.'))

	module.remove_rule("`")
	local Rule = require("nvim-autopairs.rule")
	module.add_rule(Rule("`", "`", { "lua", "ruby", "javascript" }))
	module.add_rule(Rule("```", "```", "markdown"))
end

lvim.builtin.telescope.on_config_done = function(module)
 	module.load_extension("fzy_native")
end

lvim.builtin.galaxyline.on_config_done = function(module)
	local section = module.section

	-- print the entire table
	-- print(vim.inspect(gls.right))
	-- type :messages to read the printed output

	-- print an element at a given index.  Lua table indexes start at 1
	-- print(vim.inspect(gls.right[1]))

	-- remove the sections you don't want.  The remove function takes an index.  Leaving off the index will remove the last item from the table.
	table.remove(section.right, 1)
	table.remove(section.right, 1)
	table.remove(section.right, 1)
	table.remove(section.right, 1)

	-- This will remove the entire right side.  You can add in the sections you want
	-- gls.right = {}
end

lvim.builtin.comment.on_config_done = function(module)
	vim.schedule(function()
		print("comment: " .. vim.inspect(module ~= nil))
		require("nvim_comment").setup({ line_mapping = "<leader>zz", operator_mapping = "<leader>c" })
	end)
end

